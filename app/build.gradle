apply plugin: 'com.android.application'
apply plugin: 'AndResGuard'
android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.shuangpin.rich"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 2
        versionName "1.0.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }

        // ...

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "listener", "leakcanary.FailTestOnLeakRunListener"
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file('myStore.jks')
            storePassword "456a789"
            keyAlias "myStore"
            keyPassword "456a789"
            v2SigningEnabled false
        }

        debug {
            storeFile file('debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    // 将 .so 文件打包为 Native_Libs.jar 包文件
    task nativeLibsToJar(type: Zip, description: "create a jar archive of the native libs") {
        destinationDir file("$projectDir/libs")
        baseName "Native_Libs"
        extension "jar"
        from fileTree(dir: "libs", include: "**/*.so")
        into "lib"
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn(nativeLibsToJar)
    }//////////
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation files('libs/universal-image-loader-1.9.4-with-sources.jar')
    //oss
    implementation project(':pullToRefresh')


    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.jakewharton:butterknife:5.1.1'
    implementation 'org.xutils:xutils:3.5.0'
    implementation 'com.zhy:okhttputils:2.6.2'
    implementation 'com.readystatesoftware.systembartint:systembartint:1.0.3'
    implementation 'com.squareup.picasso:picasso:2.4.0'
    implementation 'com.aliyun.dpa:oss-android-sdk:2.4.5'
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'com.squareup.okio:okio:1.15.0'
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.github.bumptech.glide:glide:4.5.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.2.3'
    implementation 'com.qiniu:qiniu-android-sdk:7.3.11'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.1'
    testImplementation 'junit:junit:4.12'

    //debug  leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-2'
    implementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.0-beta-2'
//    androidTestImplementation "com.squareup.leakcanary:leakcanary-android-instrumentation:${leakCanaryVersion}"
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
}



andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // It will keep the origin path of your resources when it's true
    keepRoot = false
    // If set, name column in arsc those need to proguard will be kept to this value
    fixedResName = "arg"
    // It will merge the duplicated resources, but don't rely on this feature too much.
    // it's always better to remove duplicated resource from repo
    mergeDuplicatedRes = true
    whiteList = [
            // your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"


            // 我在实际项目中遇到第三方使用getIdentifier访问的资源的问题，将指定的资源放入白名单后，虽然不闪退了，但还是会出现无法理解的错误。所以只好全部id都放入白名单
//            "R.id.*"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.17'
        //path = "/usr/local/bin/7za"
    }

    /**
     * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
     * to the path which assemble[Task] write to
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
     * Only works in V1signing, default value is "SHA-1"
     **/
    // digestalg = "SHA-256"
}